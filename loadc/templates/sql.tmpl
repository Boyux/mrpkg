// Code generated by loadc, DO NOT EDIT

package {{ .Package }}

{{- if gt (len .TmplMap) 0 }}
    import (
    "strings"
    "text/template"
    )
{{- end }}

{{ if gt (len .SqlMap) 0 }}
    const (
    {{- range $key, $value := .SqlMap }}
        Sql{{- camelize $key }} = {{ quote $key }}
    {{- end }}
    )
{{ end }}

{{ if gt (len .TmplMap) 0 }}
    const (
    {{- range $key, $value := .TmplMap }}
        Tmpl{{- camelize $key }} = {{ quote $key }}
    {{- end }}
    )
{{ end }}

{{ if gt (len .SqlMap) 0 }}
    func init() {
    var _ interface {
    AddSql(string, string)
    } = {{ if .Pointer }} & {{ end }} {{ .Ident }}
    {{- $ident := .Ident }}
    {{- range $key, $value := .SqlMap }}

        {{ $ident }}.AddSql(
        {{ quote $key }},
        {{ quote $value }},
        )
    {{- end }}
    }
{{ end }}

{{ if gt (len .TmplMap) 0 }}
    func init() {
    var _ interface {
    AddTmpl(string, *template.Template)
    } = {{ if .Pointer }} & {{ end }} {{ .Ident }}

    var funcMap = template.FuncMap{
    "bindvars": genBindVars,
    }
    {{- $ident := .Ident }}
    {{- range $key, $value := .TmplMap }}

        {{ $ident }}.AddTmpl(
        {{ quote $key }},
        template.Must(
        template.
        New({{ quote $key }}).
        Funcs(funcMap).
        Parse({{ quote $value }}),
        ),
        )
    {{- end }}
    }
{{ end }}

{{- if gt (len .TmplMap) 0 }}
    func genBindVars(n int) string {
    bindVars := make([]string, n)
    for i := 0; i < n; i++ {
    bindVars[i] = "?"
    }
    return strings.Join(bindVars, ", ")
    }
{{ end }}
