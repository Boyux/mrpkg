{{- /*gotype: github.com/Boyux/mrpkg/loadc.SqlxContext*/ -}}
// Code generated by loadc, DO NOT EDIT

package {{ $.Package }}

import (
"fmt"
"bytes"
"strconv"
{{ if importSql $.Methods -}}
    "database/sql"
{{- end }}
{{ if importStrings $.Methods -}}
    "strings"
{{- end }}
"text/template"
"github.com/jmoiron/sqlx"
"github.com/Boyux/mrpkg"
)

{{ $context := $ }}
{{ $impName := (printf "impl%s" $.Ident) }}
{{ $receiver := $impName }}

func New{{ $.Ident }}(drv string, dsn string) {{ $.Ident }} {
return &{{ $impName }}{
Core: sqlx.MustOpen(drv, dsn),
}
}

func New{{ $.Ident }}FromDB(core *sqlx.DB) {{ $.Ident }} {
return &{{ $impName }}{
Core: core,
}
}

type {{ $impName }} struct {
withTx bool
Core interface{
Beginx() (*sqlx.Tx, error)
PrepareNamed(query string) (*sqlx.NamedStmt, error)
Exec(query string, args ...interface{}) (sql.Result, error)
Get(dest interface{}, query string, args ...interface{}) error
Select(dest interface{}, query string, args ...interface{}) error
}
}

{{ range $index, $method := $.Methods }}
    {{ $sortIn := $method.SortIn }}
    func (imp *{{ $receiver }}) {{ $method.Ident }}(
    {{- range $index, $ident := $sortIn -}}
        {{- $ident }} {{ getRepr (index $method.In $ident) }},
    {{- end -}}
    )
    {{- if gt (len $method.Out) 0 -}}
        (
        {{- range $index, $type := $method.Out }}
            {{- getRepr $type }},
        {{- end -}}
        )
    {{- end -}}
    {
    var (
    {{ range $index, $type := $method.Out -}}
        {{ if lt $index (sub (len $method.Out) 1) -}}
            v{{- $index -}}{{- $method.Ident }} {{ getRepr $type }}
        {{ end -}}
    {{ end -}}
    {{- $err := printf "err%s" $method.Ident }}
    {{- $err }} error
    )

    {{ $sqlTmpl := printf "sqlTmpl%s" $method.Ident }}
    {{ $sqlTmpl }} := template.Must(
    template.
    New({{ quote $method.Ident }}).
    Funcs(template.FuncMap{
    "bindvars": mrpkg.GenBindVars,
    }).
    Parse({{ quote (readHeader $method.Header) }}),
    )

    {{ $sql := printf "sql%s" $method.Ident }}
    {{ $sql }} := mrpkg.GetObj[*bytes.Buffer]()
    defer mrpkg.PutObj({{ $sql }})
    defer {{ $sql }}.Reset()

    if {{ $err }} = {{ $sqlTmpl }}.Execute({{ $sql }}, map[string]any{
    {{ range $index, $ident := $sortIn -}}
        {{- quote $ident }}: {{ $ident -}},
    {{ end }}
    }); {{ $err }} != nil {
    return {{ range $index, $type := $method.Out -}}
        {{- if lt $index (sub (len $method.Out) 1) -}}
            v{{- $index -}}{{- $method.Ident }},
        {{- end -}}
    {{- end -}} fmt.Errorf("error executing %s template: %w", strconv.Quote({{ quote $method.Ident }}), {{ $err }})
    }

    {{ if isExec $method.SqlOperation }}
        {{- $tx := printf "tx%s" $method.Ident -}}
        {{ $tx }}, {{ $err }} := imp.Core.Beginx()
        if {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} fmt.Errorf("error creating %s transaction: %w", strconv.Quote({{ quote $method.Ident }}), {{ $err }})
        }
        if !imp.withTx{
        defer {{ $tx }}.Rollback()
        }

        {{ $offset := printf "offset%s" $method.Ident }}
        {{ $args := printf "args%s" $method.Ident -}}
        {{ if hasFeature ($method.SqlFeatures) "NAMED" }}
            {{ $args }} := map[string]any{
            {{ range $index, $ident := $sortIn -}}
                {{- quote $ident }}: {{ $ident -}},
            {{ end }}
            }
        {{ else }}
            {{ $offset }} := 0
            {{ $args }} := mrpkg.MergeArgs(
            {{ range $index, $ident := $sortIn -}}
                {{- $ident -}},
            {{ end }}
            )
        {{ end }}

        {{ $splitSql := printf "splitSql%s" $method.Ident }}
        for _, {{ $splitSql }} := range strings.Split({{ $sql }}.String(), ";") {
        {{ $splitSql }} = strings.TrimSpace({{ $splitSql }})
        if {{ $splitSql }} == "" {
        continue
        }
        {{ $count := printf "count%s" $method.Ident -}}
        {{ if not (hasFeature ($method.SqlFeatures) "NAMED") }}
            {{ $count }} := strings.Count({{ $splitSql }}, "?")
        {{ end }}
        {{- $execResult := printf "v0%s" $method.Ident }}
        {{ if hasFeature ($method.SqlFeatures) "NAMED" }}
            {{ $stmt := printf "stmt%s" $method.Ident }}
            {{ $stmt }}, {{ $err }} := {{ $tx }}.PrepareNamed({{ $splitSql }})
            if {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}} fmt.Errorf("error creating %s prepare statement: %w", strconv.Quote({{ quote $method.Ident }}), {{ $err }})
            }

            if {{ if gt (len $method.Out) 1 }}{{ $execResult }}{{ else }}_{{ end }}, {{ $err }} = {{ $stmt }}.Exec({{ $args }}); {{ $err }} != nil {
        {{ else }}
            if {{ if gt (len $method.Out) 1 }}{{ $execResult }}{{ else }}_{{ end }}, {{ $err }} = {{ $tx }}.Exec({{ $splitSql }}, {{ $args }}[{{ $offset }}:{{ $offset }}+{{ $count }}]...); {{ $err }} != nil {
        {{ end -}}
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} fmt.Errorf("error executing %s sql: \n\n%s\n\n%w", strconv.Quote({{ quote $method.Ident }}), {{ $splitSql }}, {{ $err }})
        }
        {{ if not (hasFeature ($method.SqlFeatures) "NAMED") }}
            {{ $offset }} += {{ $count }}
        {{ end -}}
        }

        if !imp.withTx{
        if {{ $err }} := {{ $tx }}.Commit(); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} fmt.Errorf("error committing %s transaction: %w", strconv.Quote({{ quote $method.Ident }}), {{ $err }})
        }
        }
    {{ end }}

    {{ if isQuery $method.SqlOperation }}
        {{ $sqlQuery := printf "sqlQuery%s" $method.Ident -}}
        {{ $sqlQuery }} := strings.TrimSpace({{ $sql }}.String())
        {{- $args := printf "args%s" $method.Ident -}}
        {{ if hasFeature ($method.SqlFeatures) "NAMED" }}
            {{ $args }} := map[string]any{
            {{ range $index, $ident := $sortIn -}}
                {{- quote $ident }}: {{ $ident -}},
            {{ end }}
            }
        {{ else }}
            {{ $args }} := mrpkg.MergeArgs(
            {{ range $index, $ident := $sortIn -}}
                {{- $ident -}},
            {{ end }}
            )
        {{ end }}

        {{ if hasFeature ($method.SqlFeatures) "NAMED" }}
            {{ $stmt := printf "stmt%s" $method.Ident }}
            {{ $stmt }}, {{ $err }} := imp.Core.PrepareNamed({{ $sqlQuery }})
            if {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}} fmt.Errorf("error creating %s prepare statement: %w", strconv.Quote({{ quote $method.Ident }}), {{ $err }})
            }
            if {{ $err }} = {{ $stmt }}.{{ if isSlice (index $method.Out 0) }}Select{{ else }}Get{{ end }}(&v0{{ $method.Ident }}, {{ $args }}); {{ $err }} != nil {
        {{ else }}
            if {{ $err }} = imp.Core.{{ if isSlice (index $method.Out 0) }}Select{{ else }}Get{{ end }}(&v0{{ $method.Ident }}, {{ $sqlQuery }}, {{ $args }}...); {{ $err }} != nil {
        {{ end -}}
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} fmt.Errorf("error executing %s sql: \n\n%s\n\n%w", strconv.Quote({{ quote $method.Ident }}), {{ $sqlQuery }}, {{ $err }})
        }
    {{ end }}

    return {{ range $index, $type := $method.Out -}}
        {{- if lt $index (sub (len $method.Out) 1) -}}
            v{{- $index -}}{{- $method.Ident }},
        {{- end -}}
    {{- end -}} nil
    }
{{ end }}

{{ if $.WithTx }}
    {{ $tx := printf "tx%s" $.Ident }}
    type {{ $tx }} struct {
    *sqlx.Tx
    }

    func (tx {{ $tx }}) Beginx() (*sqlx.Tx, error) {
    return tx.Tx, nil
    }

    func (imp *{{ $receiver }}) WithTx(f func({{ $.Ident }}) error) error {
    inner, err := imp.Core.Beginx()
    if err != nil {
    return fmt.Errorf("error creating transaction in %s: %w", strconv.Quote("WithTx"), err)
    }

    defer inner.Rollback()

    tx := &{{ $impName }}{
    withTx: true,
    Core: &{{ $tx }}{
    inner,
    },
    }

    if err = f(tx); err != nil {
    return err
    }

    if err = inner.Commit(); err != nil {
    return fmt.Errorf("error committing transaction in %s: %w", strconv.Quote("WithTx"), err)
    }

    return nil
    }
{{ end }}